package chain

import (
	"reflect"
	"testing"
)

func TestNewDataBlock(t *testing.T) {
	type args struct {
		data     []byte
		lastHash [HashSize]byte
	}
	tests := []struct {
		name string
		args args
		want *HashedBlock
	}{
		{
			name: "Create first block",
			args: args{
				data:     []byte{4},
				lastHash: [32]byte{0},
			},
			want: &HashedBlock{
				Data: []byte{4},
				Hash: [32]byte{0x82, 0xf0, 0x2c, 0xf2, 0xac, 0x00, 0x74, 0x61, 0x9e, 0x6d, 0x74, 0x7c, 0x35, 0xe0, 0x8b, 0x29, 0x43, 0x1a, 0x16, 0x94, 0x3d, 0xdf, 0x81, 0xcf, 0xd9, 0x06, 0x5c, 0x00, 0x4e, 0xe6, 0x36, 0x4a},
			},
		},
		{
			name: "Create other block",
			args: args{
				data:     []byte{4},
				lastHash: [32]byte{0x82, 0xf0, 0x2c, 0xf2, 0xac, 0x00, 0x74, 0x61, 0x9e, 0x6d, 0x74, 0x7c, 0x35, 0xe0, 0x8b, 0x29, 0x43, 0x1a, 0x16, 0x94, 0x3d, 0xdf, 0x81, 0xcf, 0xd9, 0x06, 0x5c, 0x00, 0x4e, 0xe6, 0x36, 0x4a},
			},
			want: &HashedBlock{
				Data: []byte{4},
				Hash: [32]byte{0xd0, 0x87, 0xaa, 0x42, 0xf4, 0x43, 0xe7, 0x0a, 0x64, 0x62, 0x5e, 0xf5, 0x8c, 0xc4, 0xfd, 0xbf, 0x50, 0x98, 0x90, 0xba, 0x1d, 0x4f, 0xe0, 0x77, 0xa9, 0x9f, 0x14, 0x40, 0x20, 0xa0, 0x8d, 0x00},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewHashedBlock(tt.args.data, tt.args.lastHash); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewDataBlock() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestDataBlock_Equal(t *testing.T) {
	type args struct {
		other *HashedBlock
	}
	tests := []struct {
		name  string
		block *HashedBlock
		args  args
		want  bool
	}{
		{
			name:  "Equal",
			block: NewHashedBlock([]byte{4}, [32]byte{0}),
			args: args{
				other: NewHashedBlock([]byte{4}, [32]byte{0}),
			},
			want: true,
		},
		{
			name:  "Not equal",
			block: NewHashedBlock([]byte{4}, [32]byte{0}),
			args: args{
				other: NewHashedBlock([]byte{5}, [32]byte{0}),
			},
			want: false,
		},
		{
			name:  "Not equal",
			block: NewHashedBlock([]byte{4}, [32]byte{0}),
			args: args{
				other: NewHashedBlock([]byte{4}, [32]byte{1}),
			},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			d := tt.block
			if got := d.Equal(tt.args.other); got != tt.want {
				t.Errorf("DataBlock.Equal() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestChain_Add(t *testing.T) {
	type args struct {
		data []byte
	}
	tests := []struct {
		name    string
		chain   func() *HashedLinearChain
		args    args
		want    []*HashedBlock
		wantErr bool
	}{
		{
			name: "Add first block",
			chain: func() *HashedLinearChain {
				return &HashedLinearChain{}
			},
			args: args{
				data: []byte{5},
			},
			wantErr: false,
			want: []*HashedBlock{
				{
					Data: []byte{5},
					Hash: [32]byte{0x08, 0x6f, 0xb6, 0x0b, 0xd9, 0x68, 0xfe, 0x68, 0xec, 0xec, 0x6a, 0x8d, 0x82, 0x6e, 0xa5, 0xaa, 0x7d, 0x3d, 0x80, 0x20, 0xe6, 0x44, 0xd7, 0xc5, 0xd0, 0xe0, 0x7d, 0xed, 0x45, 0x6c, 0xa3, 0xe8},
				},
			},
		},
		{
			name: "Add more block",
			chain: func() *HashedLinearChain {
				return &HashedLinearChain{
					Blocks: []*HashedBlock{
						{
							Data: []byte{4},
							Hash: [32]byte{0x82, 0xf0, 0x2c, 0xf2, 0xac, 0x00, 0x74, 0x61, 0x9e, 0x6d, 0x74, 0x7c, 0x35, 0xe0, 0x8b, 0x29, 0x43, 0x1a, 0x16, 0x94, 0x3d, 0xdf, 0x81, 0xcf, 0xd9, 0x06, 0x5c, 0x00, 0x4e, 0xe6, 0x36, 0x4a},
						},
					},
				}
			},
			args: args{
				data: []byte{6},
			},
			wantErr: false,
			want: []*HashedBlock{
				{
					Data: []byte{4},
					Hash: [32]byte{0x82, 0xf0, 0x2c, 0xf2, 0xac, 0x00, 0x74, 0x61, 0x9e, 0x6d, 0x74, 0x7c, 0x35, 0xe0, 0x8b, 0x29, 0x43, 0x1a, 0x16, 0x94, 0x3d, 0xdf, 0x81, 0xcf, 0xd9, 0x06, 0x5c, 0x00, 0x4e, 0xe6, 0x36, 0x4a},
				},
				{
					Data: []byte{6},
					Hash: [32]byte{0xf0, 0xdd, 0xc4, 0x2c, 0x95, 0x78, 0x98, 0x73, 0x43, 0x51, 0x7c, 0x11, 0x9a, 0x20, 0xd9, 0x54, 0xda, 0x21, 0xfe, 0x83, 0xc8, 0x53, 0x87, 0x74, 0x9d, 0x6c, 0x43, 0x4d, 0x01, 0x26, 0x4c, 0x9d},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := tt.chain()
			if err := c.Add(tt.args.data); (err != nil) != tt.wantErr {
				t.Errorf("LinearChain.Add() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			got := c.Blocks
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("LinearChain.Add() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestChain_Get(t *testing.T) {
	normalChain := func() *HashedLinearChain {
		return &HashedLinearChain{
			Blocks: []*HashedBlock{
				{
					Data: []byte{4},
					Hash: [32]byte{0x82, 0xf0, 0x2c, 0xf2, 0xac, 0x00, 0x74, 0x61, 0x9e, 0x6d, 0x74, 0x7c, 0x35, 0xe0, 0x8b, 0x29, 0x43, 0x1a, 0x16, 0x94, 0x3d, 0xdf, 0x81, 0xcf, 0xd9, 0x06, 0x5c, 0x00, 0x4e, 0xe6, 0x36, 0x4a},
				},
			},
		}
	}

	type args struct {
		index int
	}
	tests := []struct {
		name    string
		chain   func() *HashedLinearChain
		args    args
		want    *HashedBlock
		wantErr bool
	}{
		{
			name:  "Happy case",
			chain: normalChain,
			args: args{
				index: 0,
			},
			want: &HashedBlock{
				Data: []byte{4},
				Hash: [32]byte{0x82, 0xf0, 0x2c, 0xf2, 0xac, 0x00, 0x74, 0x61, 0x9e, 0x6d, 0x74, 0x7c, 0x35, 0xe0, 0x8b, 0x29, 0x43, 0x1a, 0x16, 0x94, 0x3d, 0xdf, 0x81, 0xcf, 0xd9, 0x06, 0x5c, 0x00, 0x4e, 0xe6, 0x36, 0x4a},
			},
			wantErr: false,
		},
		{
			name:  "Out of range",
			chain: normalChain,
			args: args{
				index: 2,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name:  "Invalid index",
			chain: normalChain,
			args: args{
				index: -2,
			},
			want:    nil,
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := tt.chain()
			got, err := c.Get(tt.args.index)
			if (err != nil) != tt.wantErr {
				t.Errorf("LinearChain.Get() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("LinearChain.Get() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestChain_Set(t *testing.T) {
	normalChain := func() *HashedLinearChain {
		normalChain := HashedLinearChain{}
		normalChain.Add([]byte{4})
		normalChain.Add([]byte{4})
		normalChain.Add([]byte{5})
		normalChain.Add([]byte{6})

		return &normalChain
	}

	type args struct {
		index int
		data  []byte
	}
	tests := []struct {
		name    string
		chain   func() *HashedLinearChain
		args    args
		want    []*HashedBlock
		wantErr bool
	}{
		{
			name:  "Set first element",
			chain: normalChain,
			args: args{
				index: 0,
				data:  []byte{7},
			},
			wantErr: false,
			want: []*HashedBlock{
				{
					Data: []byte{7},
					Hash: [32]byte{0x36, 0xca, 0x34, 0x42, 0x19, 0xd7, 0x39, 0xd9, 0x71, 0xdd, 0xbe, 0x40, 0x46, 0x06, 0x5d, 0xcc, 0x95, 0xc5, 0x94, 0xa1, 0x60, 0xaf, 0xa4, 0xb8, 0xe2, 0x23, 0xc6, 0xb4, 0xfa, 0xb6, 0xfc, 0x63},
				},
				{
					Data: []byte{4},
					Hash: [32]byte{0x53, 0x50, 0xc2, 0x25, 0x13, 0xaa, 0x02, 0x3b, 0x3f, 0xe8, 0x3d, 0xce, 0xfc, 0xd3, 0x66, 0xb9, 0x5c, 0x51, 0xe6, 0x45, 0x71, 0xb1, 0x14, 0x75, 0x32, 0x0b, 0xd4, 0xa4, 0x1f, 0x61, 0xeb, 0x4a},
				},
				{
					Data: []byte{5},
					Hash: [32]byte{0xa9, 0x50, 0x6a, 0xfe, 0xdf, 0x19, 0x8b, 0x62, 0x03, 0x17, 0x8d, 0x8c, 0xb9, 0xa2, 0x76, 0xc4, 0x4d, 0x94, 0x42, 0x12, 0x5b, 0x41, 0x35, 0x8a, 0x8e, 0x6c, 0xf8, 0xf6, 0x5e, 0xa8, 0xc6, 0xf6},
				},
				{
					Data: []byte{6},
					Hash: [32]byte{0xf5, 0x41, 0xb3, 0x37, 0xa4, 0xda, 0xbc, 0x9c, 0xd4, 0x8b, 0x2e, 0x2d, 0x83, 0x5c, 0x89, 0x4b, 0xa6, 0x19, 0xa0, 0xf0, 0x8c, 0x86, 0x9b, 0xcc, 0x0a, 0xb7, 0x4c, 0xf0, 0x7c, 0xe9, 0xa0, 0xd5},
				},
			},
		},
		{
			name:  "Set last element",
			chain: normalChain,
			args: args{
				index: 3,
				data:  []byte{7},
			},
			wantErr: false,
			want: []*HashedBlock{
				{
					Data: []byte{4},
					Hash: [32]byte{0x82, 0xf0, 0x2c, 0xf2, 0xac, 0x00, 0x74, 0x61, 0x9e, 0x6d, 0x74, 0x7c, 0x35, 0xe0, 0x8b, 0x29, 0x43, 0x1a, 0x16, 0x94, 0x3d, 0xdf, 0x81, 0xcf, 0xd9, 0x06, 0x5c, 0x00, 0x4e, 0xe6, 0x36, 0x4a},
				},
				{
					Data: []byte{4},
					Hash: [32]byte{0xd0, 0x87, 0xaa, 0x42, 0xf4, 0x43, 0xe7, 0x0a, 0x64, 0x62, 0x5e, 0xf5, 0x8c, 0xc4, 0xfd, 0xbf, 0x50, 0x98, 0x90, 0xba, 0x1d, 0x4f, 0xe0, 0x77, 0xa9, 0x9f, 0x14, 0x40, 0x20, 0xa0, 0x8d, 0x00},
				},
				{
					Data: []byte{5},
					Hash: [32]byte{0x06, 0xea, 0x25, 0x1e, 0xf3, 0xda, 0x61, 0x57, 0xe7, 0x5b, 0x4c, 0x09, 0xf1, 0xcb, 0x9a, 0x0c, 0xa2, 0xcb, 0x77, 0xba, 0xbd, 0xcc, 0xb7, 0x91, 0xe5, 0xde, 0xc3, 0x8e, 0x1c, 0x48, 0x25, 0xde},
				},
				{
					Data: []byte{7},
					Hash: [32]byte{0xb2, 0xac, 0x48, 0x83, 0x7b, 0x1e, 0x47, 0x37, 0x20, 0xdf, 0x9f, 0x4c, 0xf5, 0x22, 0x74, 0x98, 0xd9, 0xed, 0x8c, 0x64, 0x45, 0x34, 0xb4, 0xcc, 0x8a, 0x15, 0x8a, 0xab, 0xbc, 0xe4, 0x27, 0xa9},
				},
			},
		},
		{
			name:  "Set middle element",
			chain: normalChain,
			args: args{
				index: 2,
				data:  []byte{7},
			},
			wantErr: false,
			want: []*HashedBlock{
				{
					Data: []byte{4},
					Hash: [32]byte{0x82, 0xf0, 0x2c, 0xf2, 0xac, 0x00, 0x74, 0x61, 0x9e, 0x6d, 0x74, 0x7c, 0x35, 0xe0, 0x8b, 0x29, 0x43, 0x1a, 0x16, 0x94, 0x3d, 0xdf, 0x81, 0xcf, 0xd9, 0x06, 0x5c, 0x00, 0x4e, 0xe6, 0x36, 0x4a},
				},
				{
					Data: []byte{4},
					Hash: [32]byte{0xd0, 0x87, 0xaa, 0x42, 0xf4, 0x43, 0xe7, 0x0a, 0x64, 0x62, 0x5e, 0xf5, 0x8c, 0xc4, 0xfd, 0xbf, 0x50, 0x98, 0x90, 0xba, 0x1d, 0x4f, 0xe0, 0x77, 0xa9, 0x9f, 0x14, 0x40, 0x20, 0xa0, 0x8d, 0x00},
				},
				{
					Data: []byte{7},
					Hash: [32]byte{0x1c, 0xea, 0x68, 0xbe, 0x94, 0xd3, 0xc4, 0x0b, 0xfe, 0x9e, 0x14, 0x24, 0x15, 0x44, 0x9b, 0x35, 0xb5, 0x01, 0xaf, 0x52, 0x7c, 0xe3, 0x47, 0xaa, 0xf1, 0x31, 0x09, 0x70, 0xef, 0x05, 0xc5, 0x0d},
				},
				{
					Data: []byte{6},
					Hash: [32]byte{0xc7, 0xae, 0x1e, 0xf9, 0xc4, 0x3a, 0x8f, 0x07, 0xf6, 0xd9, 0xe5, 0x15, 0x82, 0xde, 0x7e, 0x30, 0x96, 0x96, 0x77, 0x07, 0xcd, 0x22, 0x76, 0x63, 0xeb, 0xc5, 0xdc, 0x0b, 0xb4, 0x5f, 0x7a, 0x3a},
				},
			},
		},
		{
			name:  "Out of range",
			chain: normalChain,
			args: args{
				index: 6,
				data:  []byte{7},
			},
			wantErr: true,
			want: []*HashedBlock{
				{
					Data: []byte{4},
					Hash: [32]byte{0x82, 0xf0, 0x2c, 0xf2, 0xac, 0x00, 0x74, 0x61, 0x9e, 0x6d, 0x74, 0x7c, 0x35, 0xe0, 0x8b, 0x29, 0x43, 0x1a, 0x16, 0x94, 0x3d, 0xdf, 0x81, 0xcf, 0xd9, 0x06, 0x5c, 0x00, 0x4e, 0xe6, 0x36, 0x4a},
				},
				{
					Data: []byte{4},
					Hash: [32]byte{0xd0, 0x87, 0xaa, 0x42, 0xf4, 0x43, 0xe7, 0x0a, 0x64, 0x62, 0x5e, 0xf5, 0x8c, 0xc4, 0xfd, 0xbf, 0x50, 0x98, 0x90, 0xba, 0x1d, 0x4f, 0xe0, 0x77, 0xa9, 0x9f, 0x14, 0x40, 0x20, 0xa0, 0x8d, 0x00},
				},
				{
					Data: []byte{5},
					Hash: [32]byte{0x06, 0xea, 0x25, 0x1e, 0xf3, 0xda, 0x61, 0x57, 0xe7, 0x5b, 0x4c, 0x09, 0xf1, 0xcb, 0x9a, 0x0c, 0xa2, 0xcb, 0x77, 0xba, 0xbd, 0xcc, 0xb7, 0x91, 0xe5, 0xde, 0xc3, 0x8e, 0x1c, 0x48, 0x25, 0xde},
				},
				{
					Data: []byte{6},
					Hash: [32]byte{0x0d, 0x65, 0x8c, 0x54, 0x8e, 0xd0, 0xe7, 0xc4, 0x20, 0xc7, 0xa1, 0x09, 0xa1, 0xc9, 0xb1, 0x0e, 0x55, 0x38, 0x50, 0x79, 0x4d, 0x71, 0xcd, 0x04, 0xbd, 0x1f, 0x12, 0x50, 0x4e, 0xeb, 0x32, 0x50},
				},
			},
		},
	}
	for _, tt := range tests {

		t.Run(tt.name, func(t *testing.T) {
			c := tt.chain()
			if err := c.Set(tt.args.index, tt.args.data); (err != nil) != tt.wantErr {
				t.Errorf("LinearChain.Set() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			got := c.Blocks
			if len(got) != len(tt.want) {
				t.Errorf("LinearChain.Set() length = %v, want %v", len(got), len(tt.want))
				return
			}
			for i := 0; i < len(got); i++ {
				if !reflect.DeepEqual(got[i], tt.want[i]) {
					t.Errorf("LinearChain.Set() index = %v, got = %v, want %v", i, got[i], tt.want[i])
					return
				}
			}
		})
	}
}
